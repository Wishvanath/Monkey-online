{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monkey","id","alt","name","email","MonkeyList","monkey_data","data","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","monkeys","searchField","fetch","then","response","json","setState","this","filteredMonkey","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAgBeA,G,kBAdF,SAACC,GAIV,OACI,yBAAKC,UAAU,kBAEX,yBAAKA,UAAW,YAAYC,IAAG,+BAA0BF,EAAMG,OAAOC,GAAvC,YAAqDC,IAAI,KACxF,4BAAKL,EAAMG,OAAOG,MAClB,8BAAON,EAAMG,OAAOI,UCcjBC,EAtBI,SAACR,GAIhB,IAAIS,EAAcT,EAAMU,KACxB,OACI,yBAAKT,UAAU,aAKVQ,EAAYE,KAAI,SAACD,GAAD,OAEb,kBAAC,EAAD,CAAMP,OAAQO,EAAME,IAAMF,EAAKN,UCLhCS,G,MARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAEV,2BAAOd,UAAU,SAASe,KAAM,SAASF,YAAcA,EAAaG,SAAWF,MCAlEG,E,YAEnB,aAAc,IAAD,8BACX,+CACKC,MAAQ,CAIXC,QAAS,GACTC,YAAa,IAPJ,E,iFAaO,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GAAI,OAAI,EAAKgB,SAAS,CAACN,QAASV,S,+BAQhC,IAAD,SAEyBiB,KAAKR,MAA9BC,EAFA,EAEAA,QAAUC,EAFV,EAEUA,YAEXO,EAAiBR,EAAQS,QAAO,SAAA1B,GAAM,OAC1CA,EAAOG,KAAKwB,cAAcC,SAASV,EAAYW,wBAEjD,OACE,yBAAK/B,UAAU,OAEb,2CAMA,kBAAC,EAAD,CAEAa,YAAa,gBACbC,aAAgB,SAACkB,GACf,EAAKP,SAAS,CAACL,YAAaY,EAAEC,OAAOC,WAMvC,kBAAC,EAAD,CAAYzB,KAAOkB,S,GApDMQ,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.bcacccaa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\nconst Card = (props) => {\r\n\r\n\r\n    // return main component\r\n    return(\r\n        <div className=\"card-container\">\r\n            {/* {JSON.stringify(props)} */}\r\n            <img className =\"avt_image\" src={`https://robohash.org/${props.monkey.id}?set=set`} alt=\"\"/>\r\n            <h3>{props.monkey.name}</h3>\r\n            <span>{props.monkey.email}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport  './card-list.style.css'\r\nimport Card from '../card/card.component'\r\nconst MonkeyList = (props) => {\r\n    \r\n\r\n    // return main component\r\n    let monkey_data = props.data\r\n    return(\r\n        <div className=\"card-list\">\r\n           {/* {JSON.stringify(monkey_data)} <br/> */}\r\n           {/* {JSON.stringify(props.children)} */}\r\n          {/* {props.children} */}\r\n\r\n            {monkey_data.map((data) => (\r\n                // <h1 key = {data.id}>{data.name}</h1>\r\n                <Card monkey={data} key ={data.id}/>\r\n            ))}\r\n\r\n                \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonkeyList;","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\nconst SearchBox = ({ placeholder, handleChange}) => (\r\n  \r\n        <input className=\"search\" type =\"search\" placeholder ={placeholder} onChange= {handleChange} />\r\n\r\n)  \r\n\r\n\r\n\r\nexport default SearchBox;","import React, { Component } from 'react'\nimport './App.css'\nimport MonkeyList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nexport default class App extends Component {\n  // define constructor\n  constructor(){\n    super();\n    this.state = {\n\n\n      // monekey list arrary\n      monkeys: [],\n      searchField: ''\n\n    }\n  }\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => this.setState({monkeys: data}))\n  }\n\n\n\n\n\n  // render main component\n  render() {\n    // destructoring the state variable\n    const {monkeys , searchField} = this.state;\n    // flilteration of monkey on set the state\n    const filteredMonkey = monkeys.filter(monkey => \n      monkey.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n\n        <h1>Monkey List</h1>\n        {/* <input  type =\"search\" placeholder =\"search Monkey\" onChange={(e) => {\n          // console.log(e.target.value);\n          this.setState({searchField: e.target.value})\n        }}/> */}\n\n        <SearchBox \n        \n        placeholder =\"search Monkey\"\n        handleChange = {(e) => {\n          this.setState({searchField: e.target.value})}}\n        \n        />\n\n\n        {/* {JSON.stringify(searchField)} */}\n        <MonkeyList data ={filteredMonkey}> \n           {/* {this.state.monkey.map((monkey_data) =>(\n            <h2 key={monkey_data.id}>{monkey_data.name}</h2>\n           ))} */}\n        </MonkeyList>\n\n        {/* show all the monkey list below */}\n        {/* {this.state.monkey.map((monkey_data) =>(\n          <h1 key={monkey_data.id}>{monkey_data.name}</h1>\n        ))} */}\n\n        {/* <MonkeyList name = {this.state.monkey}/> */}\n\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}